{"version":3,"sources":["reducers/bookReducer.js","contexts/BookContext.js","components/Navbar.js","components/BookDetails.js","components/BookList.js","components/BookForm.js","App.js","serviceWorker.js","index.js"],"names":["bookReducer","state","action","type","concat","Object","toConsumableArray","title","book","author","id","Math","random","filter","BookContext","createContext","BookContextProvider","props","_useReducer","useReducer","localData","localStorage","getItem","JSON","parse","_useReducer2","slicedToArray","books","dispatch","useEffect","setItem","stringify","react_default","a","createElement","Provider","value","children","Navbar","useContext","className","length","BookDetails","_ref","onClick","BookList","map","components_BookDetails","key","NewBookForm","_useState","useState","_useState2","setTitle","_useState3","_useState4","setAuthor","onSubmit","e","preventDefault","placeholder","onChange","target","required","App","contexts_BookContext","components_Navbar","BookForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+KAAaA,EAAc,SAACC,EAAOC,GACjC,OAAQA,EAAOC,MACb,IAAK,WACH,SAAAC,OAAAC,OAAAC,EAAA,EAAAD,CACKJ,GADL,CAEE,CACEM,MAAOL,EAAOM,KAAKD,MACnBE,OAAQP,EAAOM,KAAKC,OACpBC,GAAIC,KAAKC,YAGf,IAAK,cACH,OAAOX,EAAMY,OAAO,SAAAL,GAAI,OAAIA,EAAKE,KAAOR,EAAOQ,OCVxCI,EAAcC,0BAiBZC,EAfa,SAAAC,GAAS,IAAAC,EACTC,qBAAWnB,EAAa,GAAI,WACpD,IAAMoB,EAAYC,aAAaC,QAAQ,SACvC,OAAOF,EAAYG,KAAKC,MAAMJ,GAAa,KAHVK,EAAApB,OAAAqB,EAAA,EAAArB,CAAAa,EAAA,GAC5BS,EAD4BF,EAAA,GACrBG,EADqBH,EAAA,GAQnC,OAHAI,oBAAU,WACRR,aAAaS,QAAQ,QAASP,KAAKQ,UAAUJ,KAC5C,CAACA,IAEFK,EAAAC,EAAAC,cAACpB,EAAYqB,SAAb,CAAsBC,MAAO,CAAET,QAAOC,aACnCX,EAAMoB,WCFEC,EATA,WAAM,IACXX,EAAUY,qBAAWzB,GAArBa,MACR,OACEK,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UACbR,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,qBAAaP,EAAMc,OAAnB,uBCMSC,MAVf,SAAAC,GAA+B,IAARnC,EAAQmC,EAARnC,KACboB,EAAaW,qBAAWzB,GAAxBc,SACR,OACEI,EAAAC,EAAAC,cAAA,MAAIU,QAAS,kBAAMhB,EAAS,CAAEzB,KAAM,+BAClC6B,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SAAShC,EAAKD,OAC7ByB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,UAAUhC,EAAKC,UCLrB,SAASoC,IAAW,IACzBlB,EAAUY,qBAAWzB,GAArBa,MACR,OAAOA,EAAMc,OACXT,EAAAC,EAAAC,cAAA,OAAKM,UAAU,aACbR,EAAAC,EAAAC,cAAA,UACGP,EAAMmB,IAAI,SAAAtC,GACT,OAAOwB,EAAAC,EAAAC,cAACa,EAAD,CAAavC,KAAMA,EAAMwC,IAAKxC,EAAKE,SAKhDsB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,SAAf,oBCXJ,IAyCeS,EAzCK,WAAM,IAChBrB,EAAaW,qBAAWzB,GAAxBc,SADgBsB,EAEEC,mBAAS,IAFXC,EAAA/C,OAAAqB,EAAA,EAAArB,CAAA6C,EAAA,GAEjB3C,EAFiB6C,EAAA,GAEVC,EAFUD,EAAA,GAAAE,EAGIH,mBAAS,IAHbI,EAAAlD,OAAAqB,EAAA,EAAArB,CAAAiD,EAAA,GAGjB7C,EAHiB8C,EAAA,GAGTC,EAHSD,EAAA,GAgBxB,OACEvB,EAAAC,EAAAC,cAAA,QAAMuB,SAba,SAAAC,GACnBA,EAAEC,iBACF/B,EAAS,CACPzB,KAAM,WACNK,KAAM,CACJD,QACAE,YAGJ4C,EAAS,IACTG,EAAU,MAIRxB,EAAAC,EAAAC,cAAA,SACE/B,KAAK,OACLyD,YAAY,aACZxB,MAAO7B,EACPsD,SAAU,SAAAH,GACRL,EAASK,EAAEI,OAAO1B,QAEpB2B,UAAQ,IAEV/B,EAAAC,EAAAC,cAAA,SACE/B,KAAK,OACLyD,YAAY,SACZxB,MAAO3B,EACPoD,SAAU,SAAAH,GACRF,EAAUE,EAAEI,OAAO1B,QAErB2B,UAAQ,IAEV/B,EAAAC,EAAAC,cAAA,SAAO/B,KAAK,SAASiC,MAAM,eCvBlB4B,MAZf,WACE,OACEhC,EAAAC,EAAAC,cAAA,OAAKM,UAAU,OACbR,EAAAC,EAAAC,cAAC+B,EAAD,KACEjC,EAAAC,EAAAC,cAACgC,EAAD,MACAlC,EAAAC,EAAAC,cAACW,EAAD,MACAb,EAAAC,EAAAC,cAACiC,EAAD,SCCYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.5d59ba08.chunk.js","sourcesContent":["export const bookReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_BOOK\":\r\n      return [\r\n        ...state,\r\n        {\r\n          title: action.book.title,\r\n          author: action.book.author,\r\n          id: Math.random()\r\n        }\r\n      ];\r\n    case \"REMOVE_BOOK\":\r\n      return state.filter(book => book.id !== action.id);\r\n  }\r\n};\r\n","import React, { createContext, useReducer, useEffect } from \"react\";\r\nimport { bookReducer } from \"../reducers/bookReducer\";\r\nexport const BookContext = createContext();\r\n\r\nconst BookContextProvider = props => {\r\n  const [books, dispatch] = useReducer(bookReducer, [], () => {\r\n    const localData = localStorage.getItem(\"books\");\r\n    return localData ? JSON.parse(localData) : [];\r\n  });\r\n  useEffect(() => {\r\n    localStorage.setItem(\"books\", JSON.stringify(books));\r\n  }, [books]);\r\n  return (\r\n    <BookContext.Provider value={{ books, dispatch }}>\r\n      {props.children}\r\n    </BookContext.Provider>\r\n  );\r\n};\r\n\r\nexport default BookContextProvider;\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\n\r\nconst Navbar = () => {\r\n  const { books } = useContext(BookContext);\r\n  return (\r\n    <div className=\"navbar\">\r\n      <h1>Reading list</h1>\r\n      <p>you have {books.length} books to read...</p>\r\n    </div>\r\n  );\r\n};\r\nexport default Navbar;\r\n","import React, { useContext } from \"react\";\r\n\r\nimport { BookContext } from \"../contexts/BookContext\";\r\n\r\nfunction BookDetails({ book }) {\r\n  const { dispatch } = useContext(BookContext);\r\n  return (\r\n    <li onClick={() => dispatch({ type: \"REMOVE_BOOK, id: book.id\" })}>\r\n      <div className=\"title\">{book.title}</div>\r\n      <div className=\"author\">{book.author}</div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default BookDetails;\r\n","import React, { useContext } from \"react\";\r\nimport { BookContext } from \"../contexts/BookContext\";\r\nimport BookDetails from \"./BookDetails\";\r\n\r\nexport default function BookList() {\r\n  const { books } = useContext(BookContext);\r\n  return books.length ? (\r\n    <div className=\"book-list\">\r\n      <ul>\r\n        {books.map(book => {\r\n          return <BookDetails book={book} key={book.id} />;\r\n        })}\r\n      </ul>\r\n    </div>\r\n  ) : (\r\n    <div className=\"empty\">No books to read</div>\r\n  );\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\n\r\nimport { BookContext } from \"../contexts/BookContext\";\r\n\r\nconst NewBookForm = () => {\r\n  const { dispatch } = useContext(BookContext);\r\n  const [title, setTitle] = useState(\"\");\r\n  const [author, setAuthor] = useState(\"\");\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    dispatch({\r\n      type: \"ADD_BOOK\",\r\n      book: {\r\n        title,\r\n        author\r\n      }\r\n    });\r\n    setTitle(\"\");\r\n    setAuthor(\"\");\r\n  };\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"book title\"\r\n        value={title}\r\n        onChange={e => {\r\n          setTitle(e.target.value);\r\n        }}\r\n        required\r\n      />\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"author\"\r\n        value={author}\r\n        onChange={e => {\r\n          setAuthor(e.target.value);\r\n        }}\r\n        required\r\n      />\r\n      <input type=\"submit\" value=\"add book\" />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default NewBookForm;\r\n","import React from \"react\";\nimport BookContextProvider from \"./contexts/BookContext\";\nimport Navbar from \"./components/Navbar\";\nimport BookList from \"./components/BookList\";\nimport NewBookForm from \"./components/BookForm\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BookContextProvider>\n        <Navbar />\n        <BookList />\n        <NewBookForm />\n      </BookContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}